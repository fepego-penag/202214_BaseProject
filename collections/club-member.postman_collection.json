{
	"info": {
		"_postman_id": "8eafef06-ea1b-4a42-bf98-fc89b9a2611e",
		"name": "club-member",
		"description": "Buy or rent spacecrafts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1589290"
	},
	"item": [
		{
			"name": "AddMemberToClub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member/{{member_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member",
						"{{member_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddMemberToClub-noValidMember",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"Member not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member/{{no_valid_UUID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member",
						"{{no_valid_UUID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllMemberFromClub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMemberFromClub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member/{{member_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member",
						"{{member_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getMemberFromClub-noValidMember",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The member does not belong to this club\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member/{{no_member_club}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member",
						"{{no_member_club}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateMembersFromClub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{new_member}}\"\n    }\n    \n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateMembersFromClub-memberNoExist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"Member not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{no_valid_UUID}}\"\n    }\n    \n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteMemberFromClub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member/{{new_member}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member",
						"{{new_member}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteMemberFromClub-NoExistingMember",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The member does not belong to this club\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/club/{{club_id}}/member/{{no_member_club}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"club",
						"{{club_id}}",
						"member",
						"{{no_member_club}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-Api-Key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "<API Key>",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "no_valid_UUID",
			"value": "e7e659e0-bfb2-4f42-858c-3f1c214ff8ce",
			"type": "string"
		}
	]
}